name: chatterspace
#socket-5555
#chat - 7000
#user- 3000
#message - 5000

services:
  rabbitmq-service:
    image: rabbitmq:management
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 12
    networks:
      - chatterSpace
    ports:
      - "15672:15672"

  nginx:
    image: nginx:stable-alpine
    ports:
      - "8000:80"
    depends_on:
      rabbitmq-service:
        condition: service_healthy
    develop:
      watch:
        - action: sync+restart
          path: ./config/nginx.conf
          target: /etc/nginx/conf.d/default.conf
    networks:
      - chatterSpace
    volumes:
      - ./config/nginx.conf:/etc/nginx/conf.d/default.conf

  socket-service:
    build:
      context: ./socket
    depends_on:
      rabbitmq-service:
        condition: service_healthy
    networks:
      - chatterSpace
    develop:
      watch:
        - action: sync+restart
          path: ./socket
          target: /socket-svc

  message-service:
    build: ./message_svc
    networks:
      - chatterSpace
    depends_on:
      rabbitmq-service:
        condition: service_healthy
    develop:
      watch:
        - action: sync+restart
          path: ./message_svc
          target: /message-svc

  chat-service:
    build: ./chat_svc
    networks:
      - chatterSpace
    develop:
      watch:
        - action: sync+restart
          path: ./chat_svc
          target: /chat-svc

  user-service:
    build:
      context: ./user_svc
    networks:
      - chatterSpace
    develop:
      watch:
        - action: sync
          path: ./user_svc
          target: /user-svc

  mongo-db-service:
    image: mongo
    volumes:
      - mongo-data:/data/db
    networks:
      - chatterSpace
    ports:
      - "9000:27017"

networks:
  chatterSpace:
    driver: bridge


volumes:
  mongo-data:

    ## compose yaml for watch mode
    # services:
    #   web:
    #     build: .
    #     command: npm start
    #     container_name: socket-c
    #     env_file: .env
    #     develop:
    #       watch:
    #         - action: sync
    #           path: ./web
    #           target: /app/web
    #           ignore:
    #             - node_modules/
    #         - action: sync+restart
    #           path: ./proxy/nginx.conf
    #           target: /etc/nginx/conf.d/default.conf

    #   backend:
    #     build:
    #       context: backend
    #       target: builder 
    ## builder example in dockerfile in message_svc
    ## Used in conjuction with staged builds for different environments
